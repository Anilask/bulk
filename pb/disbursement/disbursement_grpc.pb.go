// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: disbursement.proto

package disbursement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BulkDisbursementHandler_Disburse_FullMethodName              = "/BulkDisbursementHandler/Disburse"
	BulkDisbursementHandler_UpdateDisburseDetails_FullMethodName = "/BulkDisbursementHandler/UpdateDisburseDetails"
	BulkDisbursementHandler_DownloadDisburse_FullMethodName      = "/BulkDisbursementHandler/DownloadDisburse"
	BulkDisbursementHandler_Disbursements_FullMethodName         = "/BulkDisbursementHandler/Disbursements"
)

// BulkDisbursementHandlerClient is the client API for BulkDisbursementHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BulkDisbursementHandlerClient interface {
	Disburse(ctx context.Context, in *DisbursementRequest, opts ...grpc.CallOption) (*DisbursementResponse, error)
	UpdateDisburseDetails(ctx context.Context, in *UpdateDisbursementRequest, opts ...grpc.CallOption) (*UpdateDisbursementResponse, error)
	DownloadDisburse(ctx context.Context, in *DownloadDisbursementDataRequest, opts ...grpc.CallOption) (*DownloadDisbursementDataResponse, error)
	Disbursements(ctx context.Context, in *DisbursementsRequest, opts ...grpc.CallOption) (*DisbursementsResponse, error)
}

type bulkDisbursementHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewBulkDisbursementHandlerClient(cc grpc.ClientConnInterface) BulkDisbursementHandlerClient {
	return &bulkDisbursementHandlerClient{cc}
}

func (c *bulkDisbursementHandlerClient) Disburse(ctx context.Context, in *DisbursementRequest, opts ...grpc.CallOption) (*DisbursementResponse, error) {
	out := new(DisbursementResponse)
	err := c.cc.Invoke(ctx, BulkDisbursementHandler_Disburse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulkDisbursementHandlerClient) UpdateDisburseDetails(ctx context.Context, in *UpdateDisbursementRequest, opts ...grpc.CallOption) (*UpdateDisbursementResponse, error) {
	out := new(UpdateDisbursementResponse)
	err := c.cc.Invoke(ctx, BulkDisbursementHandler_UpdateDisburseDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulkDisbursementHandlerClient) DownloadDisburse(ctx context.Context, in *DownloadDisbursementDataRequest, opts ...grpc.CallOption) (*DownloadDisbursementDataResponse, error) {
	out := new(DownloadDisbursementDataResponse)
	err := c.cc.Invoke(ctx, BulkDisbursementHandler_DownloadDisburse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulkDisbursementHandlerClient) Disbursements(ctx context.Context, in *DisbursementsRequest, opts ...grpc.CallOption) (*DisbursementsResponse, error) {
	out := new(DisbursementsResponse)
	err := c.cc.Invoke(ctx, BulkDisbursementHandler_Disbursements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BulkDisbursementHandlerServer is the server API for BulkDisbursementHandler service.
// All implementations must embed UnimplementedBulkDisbursementHandlerServer
// for forward compatibility
type BulkDisbursementHandlerServer interface {
	Disburse(context.Context, *DisbursementRequest) (*DisbursementResponse, error)
	UpdateDisburseDetails(context.Context, *UpdateDisbursementRequest) (*UpdateDisbursementResponse, error)
	DownloadDisburse(context.Context, *DownloadDisbursementDataRequest) (*DownloadDisbursementDataResponse, error)
	Disbursements(context.Context, *DisbursementsRequest) (*DisbursementsResponse, error)
	mustEmbedUnimplementedBulkDisbursementHandlerServer()
}

// UnimplementedBulkDisbursementHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedBulkDisbursementHandlerServer struct {
}

func (UnimplementedBulkDisbursementHandlerServer) Disburse(context.Context, *DisbursementRequest) (*DisbursementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disburse not implemented")
}
func (UnimplementedBulkDisbursementHandlerServer) UpdateDisburseDetails(context.Context, *UpdateDisbursementRequest) (*UpdateDisbursementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDisburseDetails not implemented")
}
func (UnimplementedBulkDisbursementHandlerServer) DownloadDisburse(context.Context, *DownloadDisbursementDataRequest) (*DownloadDisbursementDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadDisburse not implemented")
}
func (UnimplementedBulkDisbursementHandlerServer) Disbursements(context.Context, *DisbursementsRequest) (*DisbursementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disbursements not implemented")
}
func (UnimplementedBulkDisbursementHandlerServer) mustEmbedUnimplementedBulkDisbursementHandlerServer() {
}

// UnsafeBulkDisbursementHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BulkDisbursementHandlerServer will
// result in compilation errors.
type UnsafeBulkDisbursementHandlerServer interface {
	mustEmbedUnimplementedBulkDisbursementHandlerServer()
}

func RegisterBulkDisbursementHandlerServer(s grpc.ServiceRegistrar, srv BulkDisbursementHandlerServer) {
	s.RegisterService(&BulkDisbursementHandler_ServiceDesc, srv)
}

func _BulkDisbursementHandler_Disburse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisbursementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulkDisbursementHandlerServer).Disburse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BulkDisbursementHandler_Disburse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulkDisbursementHandlerServer).Disburse(ctx, req.(*DisbursementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulkDisbursementHandler_UpdateDisburseDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDisbursementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulkDisbursementHandlerServer).UpdateDisburseDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BulkDisbursementHandler_UpdateDisburseDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulkDisbursementHandlerServer).UpdateDisburseDetails(ctx, req.(*UpdateDisbursementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulkDisbursementHandler_DownloadDisburse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadDisbursementDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulkDisbursementHandlerServer).DownloadDisburse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BulkDisbursementHandler_DownloadDisburse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulkDisbursementHandlerServer).DownloadDisburse(ctx, req.(*DownloadDisbursementDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulkDisbursementHandler_Disbursements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisbursementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulkDisbursementHandlerServer).Disbursements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BulkDisbursementHandler_Disbursements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulkDisbursementHandlerServer).Disbursements(ctx, req.(*DisbursementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BulkDisbursementHandler_ServiceDesc is the grpc.ServiceDesc for BulkDisbursementHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BulkDisbursementHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BulkDisbursementHandler",
	HandlerType: (*BulkDisbursementHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Disburse",
			Handler:    _BulkDisbursementHandler_Disburse_Handler,
		},
		{
			MethodName: "UpdateDisburseDetails",
			Handler:    _BulkDisbursementHandler_UpdateDisburseDetails_Handler,
		},
		{
			MethodName: "DownloadDisburse",
			Handler:    _BulkDisbursementHandler_DownloadDisburse_Handler,
		},
		{
			MethodName: "Disbursements",
			Handler:    _BulkDisbursementHandler_Disbursements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "disbursement.proto",
}
