// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: file.proto

package file

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BulkFileHandler_UploadBulkFile_FullMethodName       = "/BulkFileHandler/UploadBulkFile"
	BulkFileHandler_UpdateBulkFileStatus_FullMethodName = "/BulkFileHandler/UpdateBulkFileStatus"
	BulkFileHandler_BulkFiles_FullMethodName            = "/BulkFileHandler/BulkFiles"
)

// BulkFileHandlerClient is the client API for BulkFileHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BulkFileHandlerClient interface {
	UploadBulkFile(ctx context.Context, in *UploadBulkFileRequest, opts ...grpc.CallOption) (*UploadBulkFileResponse, error)
	UpdateBulkFileStatus(ctx context.Context, in *UpdateBulkStatusRequest, opts ...grpc.CallOption) (*UpdateBulkStatusResponse, error)
	BulkFiles(ctx context.Context, in *BulkFilesRequest, opts ...grpc.CallOption) (*BulkFilesResponse, error)
}

type bulkFileHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewBulkFileHandlerClient(cc grpc.ClientConnInterface) BulkFileHandlerClient {
	return &bulkFileHandlerClient{cc}
}

func (c *bulkFileHandlerClient) UploadBulkFile(ctx context.Context, in *UploadBulkFileRequest, opts ...grpc.CallOption) (*UploadBulkFileResponse, error) {
	out := new(UploadBulkFileResponse)
	err := c.cc.Invoke(ctx, BulkFileHandler_UploadBulkFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulkFileHandlerClient) UpdateBulkFileStatus(ctx context.Context, in *UpdateBulkStatusRequest, opts ...grpc.CallOption) (*UpdateBulkStatusResponse, error) {
	out := new(UpdateBulkStatusResponse)
	err := c.cc.Invoke(ctx, BulkFileHandler_UpdateBulkFileStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulkFileHandlerClient) BulkFiles(ctx context.Context, in *BulkFilesRequest, opts ...grpc.CallOption) (*BulkFilesResponse, error) {
	out := new(BulkFilesResponse)
	err := c.cc.Invoke(ctx, BulkFileHandler_BulkFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BulkFileHandlerServer is the server API for BulkFileHandler service.
// All implementations must embed UnimplementedBulkFileHandlerServer
// for forward compatibility
type BulkFileHandlerServer interface {
	UploadBulkFile(context.Context, *UploadBulkFileRequest) (*UploadBulkFileResponse, error)
	UpdateBulkFileStatus(context.Context, *UpdateBulkStatusRequest) (*UpdateBulkStatusResponse, error)
	BulkFiles(context.Context, *BulkFilesRequest) (*BulkFilesResponse, error)
	mustEmbedUnimplementedBulkFileHandlerServer()
}

// UnimplementedBulkFileHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedBulkFileHandlerServer struct {
}

func (UnimplementedBulkFileHandlerServer) UploadBulkFile(context.Context, *UploadBulkFileRequest) (*UploadBulkFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadBulkFile not implemented")
}
func (UnimplementedBulkFileHandlerServer) UpdateBulkFileStatus(context.Context, *UpdateBulkStatusRequest) (*UpdateBulkStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBulkFileStatus not implemented")
}
func (UnimplementedBulkFileHandlerServer) BulkFiles(context.Context, *BulkFilesRequest) (*BulkFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkFiles not implemented")
}
func (UnimplementedBulkFileHandlerServer) mustEmbedUnimplementedBulkFileHandlerServer() {}

// UnsafeBulkFileHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BulkFileHandlerServer will
// result in compilation errors.
type UnsafeBulkFileHandlerServer interface {
	mustEmbedUnimplementedBulkFileHandlerServer()
}

func RegisterBulkFileHandlerServer(s grpc.ServiceRegistrar, srv BulkFileHandlerServer) {
	s.RegisterService(&BulkFileHandler_ServiceDesc, srv)
}

func _BulkFileHandler_UploadBulkFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadBulkFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulkFileHandlerServer).UploadBulkFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BulkFileHandler_UploadBulkFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulkFileHandlerServer).UploadBulkFile(ctx, req.(*UploadBulkFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulkFileHandler_UpdateBulkFileStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBulkStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulkFileHandlerServer).UpdateBulkFileStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BulkFileHandler_UpdateBulkFileStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulkFileHandlerServer).UpdateBulkFileStatus(ctx, req.(*UpdateBulkStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulkFileHandler_BulkFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulkFileHandlerServer).BulkFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BulkFileHandler_BulkFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulkFileHandlerServer).BulkFiles(ctx, req.(*BulkFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BulkFileHandler_ServiceDesc is the grpc.ServiceDesc for BulkFileHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BulkFileHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BulkFileHandler",
	HandlerType: (*BulkFileHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadBulkFile",
			Handler:    _BulkFileHandler_UploadBulkFile_Handler,
		},
		{
			MethodName: "UpdateBulkFileStatus",
			Handler:    _BulkFileHandler_UpdateBulkFileStatus_Handler,
		},
		{
			MethodName: "BulkFiles",
			Handler:    _BulkFileHandler_BulkFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file.proto",
}
